{"version":3,"file":"772.js","mappings":"gcASO,MAAMA,EA0DXC,WAAAA,CAAYC,GAAaC,EAAA,sBACvBC,KAAKC,OAASH,CAChB,CAEA,aAAMI,CAAQC,GAA2B,IAAAC,EAAAC,EACvC,MAAMC,QAAeN,KAAKO,YACxBP,KAAKC,OACL,CACEE,OACAK,KAAM,YAER,GAGF,OAAOF,SAAY,QAANF,EAANE,EAAQH,YAAI,IAAAC,GAAQ,QAARC,EAAZD,EAAcE,cAAM,IAAAD,OAAd,EAANA,EAAsBF,IAC/B,CAEA,gBAAMM,CAAWN,SACTH,KAAKO,YAAYP,KAAKC,OAAQ,CAClCE,OACAK,KAAM,cAEV,CAEA,WAAME,CAAMP,SACJH,KAAKO,YAAYP,KAAKC,OAAQ,CAClCE,OACAK,KAAM,SAEV,CAEA,gBAAMG,GAAa,IAAAC,EACjB,MAAMC,QAAiBb,KAAKO,YAC1BP,KAAKC,OACL,CACEO,KAAM,eAER,GAGF,OAAOK,SAAc,QAAND,EAARC,EAAUV,YAAI,IAAAS,OAAN,EAARA,EAAgBN,MACzB,CAEAQ,OAAAA,GACEd,KAAKC,OAAOc,WACd,CAEQR,WAAAA,CAAYN,EAAgBE,EAA2Ba,GAAe,GAC5E,OAAO,IAAIC,SAAmCC,IAC5C,MAAMC,EAAUC,KAAKC,SAASC,WAE9B,GAAIN,EAAc,CAChB,MAAMO,EAAYC,IACZL,IAAYK,EAAErB,KAAKgB,UACrBlB,EAAOwB,oBAAoB,UAAWF,GACtCL,EAAQM,GACV,EAGFvB,EAAOyB,iBAAiB,UAAWH,EACrC,CAEAtB,EAAO0B,YAAY,IAAKxB,EAAMgB,YAEzBH,GAAcE,OAAQU,EAAU,GAEzC,ECnIK,SAASC,GAAc,MAC5BC,EAAK,aACLC,IAKA,MAAMC,EAA2B,GAGjC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAcE,IAChCD,EAASC,GAAK,IAAIC,aAAaJ,EAAMK,OAASJ,GAIhD,IAAK,IAAIK,EAAS,EAAGA,EAASN,EAAMK,OAAQC,IAAU,CAIpD,MAAMC,EAAUD,EAASL,EAOnBO,EAAelB,KAAKmB,MAAMH,EAASL,GAEzCC,EAASK,GAASC,GAAgBR,EAAMM,EAC1C,CAEA,OAAOJ,CACT,CDoGCjC,EA7HYH,EAAa,YAGL,CACjB4C,OAAAA,EAAUtC,QAASuC,EAAiBhC,WAAYiC,IAC9C,MAAMC,EAA+B,CAAC,EA8BtCC,KAAKlB,iBAAiB,WAAYF,IAChC,IAAKA,EAAErB,KAAM,OAEb,MAAM,KAAEA,EAAI,KAAEK,EAAI,QAAEW,GAAYK,EAAErB,KAElC,OAAQK,GACN,IAAK,UA9BON,EAACC,EAAWgB,KAQ1BsB,EAAgBtC,EAAMwC,GAPLrC,IACfsC,KAAKjB,YAAY,CACfrB,SACAa,WACA,GAGmC,EAuBnCjB,CAAQC,EAAMgB,GACd,MACF,IAAK,aAtBWhB,KAClBuC,SAAAA,EAAqBvC,EAAMwC,GAAUrC,IACnCuC,OAAOC,OAAOH,EAASrC,EAAO,GAC9B,EAoBEG,CAAWN,GACX,MACF,IAAK,QAxCUqB,KACjBqB,OAAOC,OAAOH,EAASnB,EAAErB,KAAKA,KAAK,EAwC/B4C,CAAUvB,GACV,MACF,IAAK,aAtBWL,KAClByB,KAAKjB,YAAY,CACfrB,OAAQqC,EACRxB,WACA,EAmBER,CAAWQ,GAEf,GAEJ,IC5BJvB,EAAcoD,UAAUR,QAAQ,CAC9BtC,QAASA,CAACC,EAAM8C,EAAUC,KACxBA,EAAQ,CACN/C,KAAM0B,EAAc1B,IACpB,EAGJM,WAAYA,CAACN,EAAM8C,EAAUC,KAC3BA,EAAQ,CACN/C,KAAM0B,EAAc1B,IACpB,G","sources":["webpack://labelstudio/./src/lib/AudioUltra/Common/Worker/index.ts","webpack://labelstudio/./src/lib/AudioUltra/Media/SplitChannelWorker.ts"],"sourcesContent":["type MessengerResponder = (result: Record<string, any>) => void;\r\n\r\ntype MessengerCallback = (data: any, storage: Record<string, any>, respond: MessengerResponder) => void;\r\n\r\ntype MessengerInput = {\r\n  compute: MessengerCallback;\r\n  precompute?: MessengerCallback;\r\n};\r\n\r\nexport class ComputeWorker {\r\n  private worker: Worker;\r\n\r\n  static Messenger = {\r\n    receive({ compute: computeCallback, precompute: precomputeCallback }: MessengerInput) {\r\n      const storage: Record<string, any> = {};\r\n\r\n      const storeData = (e: MessageEvent) => {\r\n        Object.assign(storage, e.data.data);\r\n      };\r\n\r\n      const compute = (data: any, eventId: string) => {\r\n        const respond = (result: Record<string, any>) => {\r\n          self.postMessage({\r\n            result,\r\n            eventId,\r\n          });\r\n        };\r\n\r\n        computeCallback(data, storage, respond);\r\n      };\r\n\r\n      const precompute = (data: any) => {\r\n        precomputeCallback?.(data, storage, (result) => {\r\n          Object.assign(storage, result);\r\n        });\r\n      };\r\n\r\n      const getStorage = (eventId: string) => {\r\n        self.postMessage({\r\n          result: storage,\r\n          eventId,\r\n        });\r\n      };\r\n\r\n      self.addEventListener(\"message\", (e) => {\r\n        if (!e.data) return;\r\n\r\n        const { data, type, eventId } = e.data;\r\n\r\n        switch (type) {\r\n          case \"compute\":\r\n            compute(data, eventId);\r\n            break;\r\n          case \"precompute\":\r\n            precompute(data);\r\n            break;\r\n          case \"store\":\r\n            storeData(e);\r\n            break;\r\n          case \"getStorage\":\r\n            getStorage(eventId);\r\n            break;\r\n        }\r\n      });\r\n    },\r\n  };\r\n\r\n  constructor(url: Worker) {\r\n    this.worker = url;\r\n  }\r\n\r\n  async compute(data: Record<string, any>) {\r\n    const result = await this.sendMessage(\r\n      this.worker,\r\n      {\r\n        data,\r\n        type: \"compute\",\r\n      },\r\n      true,\r\n    );\r\n\r\n    return result?.data?.result?.data;\r\n  }\r\n\r\n  async precompute(data: Record<string, any>) {\r\n    await this.sendMessage(this.worker, {\r\n      data,\r\n      type: \"precompute\",\r\n    });\r\n  }\r\n\r\n  async store(data: Record<string, any>) {\r\n    await this.sendMessage(this.worker, {\r\n      data,\r\n      type: \"store\",\r\n    });\r\n  }\r\n\r\n  async getStorage() {\r\n    const response = await this.sendMessage(\r\n      this.worker,\r\n      {\r\n        type: \"getStorage\",\r\n      },\r\n      true,\r\n    );\r\n\r\n    return response?.data?.result;\r\n  }\r\n\r\n  destroy() {\r\n    this.worker.terminate();\r\n  }\r\n\r\n  private sendMessage(worker: Worker, data: Record<string, any>, waitResponse = false) {\r\n    return new Promise<MessageEvent | undefined>((resolve) => {\r\n      const eventId = Math.random().toString();\r\n\r\n      if (waitResponse) {\r\n        const resolver = (e: MessageEvent) => {\r\n          if (eventId === e.data.eventId) {\r\n            worker.removeEventListener(\"message\", resolver);\r\n            resolve(e);\r\n          }\r\n        };\r\n\r\n        worker.addEventListener(\"message\", resolver);\r\n      }\r\n\r\n      worker.postMessage({ ...data, eventId });\r\n\r\n      if (!waitResponse) resolve(undefined);\r\n    });\r\n  }\r\n}\r\n","import { ComputeWorker } from \"../Common/Worker\";\r\n\r\nexport function splitChannels({\r\n  value,\r\n  channelCount,\r\n}: {\r\n  value: Float32Array;\r\n  channelCount: number;\r\n}): Float32Array[] {\r\n  const channels: Float32Array[] = [];\r\n\r\n  // Create new Float32Array for each channel\r\n  for (let c = 0; c < channelCount; c++) {\r\n    channels[c] = new Float32Array(value.length / channelCount);\r\n  }\r\n\r\n  // Split the channels into separate Float32Array samples\r\n  for (let sample = 0; sample < value.length; sample++) {\r\n    // interleaved channels\r\n    // ie. 2 channels\r\n    // [channel1, channel2, channel1, channel2, ...]\r\n    const channel = sample % channelCount;\r\n    // index of the channel sample\r\n    // ie. 2 channels\r\n    // sample = 8, channel = 0, channelIndex = 4\r\n    // sample = 9, channel = 1, channelIndex = 4\r\n    // sample = 10, channel = 0, channelIndex = 5\r\n    // sample = 11, channel = 1, channelIndex = 5\r\n    const channelIndex = Math.floor(sample / channelCount);\r\n\r\n    channels[channel][channelIndex] = value[sample];\r\n  }\r\n\r\n  return channels;\r\n}\r\n\r\nComputeWorker.Messenger.receive({\r\n  compute: (data, _storage, respond) => {\r\n    respond({\r\n      data: splitChannels(data),\r\n    });\r\n  },\r\n\r\n  precompute: (data, _storage, respond) => {\r\n    respond({\r\n      data: splitChannels(data),\r\n    });\r\n  },\r\n});\r\n"],"names":["ComputeWorker","constructor","url","_defineProperty","this","worker","compute","data","_result$data","_result$data$result","result","sendMessage","type","precompute","store","getStorage","_response$data","response","destroy","terminate","waitResponse","Promise","resolve","eventId","Math","random","toString","resolver","e","removeEventListener","addEventListener","postMessage","undefined","splitChannels","value","channelCount","channels","c","Float32Array","length","sample","channel","channelIndex","floor","receive","computeCallback","precomputeCallback","storage","self","Object","assign","storeData","Messenger","_storage","respond"],"sourceRoot":""}